
with(LinearAlgebra): with(combinat):with(ListTools):

reverse := proc(L::list) return [seq(L[nops(L)-i+1], i = 1 .. nops(L))] end proc:

mypartition := proc(d ::integer) 
 local X;
  X := reverse(partition(d)):
  return [seq(reverse(X[i]),i=1..numbpart(d))];
end proc:

myconjpart := proc (L::list) local preK, K; 
  description "I needed to have a conjugate partition function that is in decreasing order."; 
  return reverse(conjpart(reverse(L)));
end proc:
smash := proc (u::anything, v::anything) 
  description "smash two vectors together"; 
 
  [seq(u[i], i = 1 .. nops(u)), seq(v[i], i = 1 .. nops(v))] 
end proc:

dimModule := proc (LL::list, k) local L, m; 
  description "this just applies a formula from Fulton and Harris pg 77";
  L := smash(LL, [seq(0, i = 1 .. k)]); m := `*`(seq(seq((L[i]-L[j]+j-i)/(j-i), j = i+1 .. k), i = 1 .. k-1)); 
  if k < nops(LL) then m := 0 end if; 
 return m 
end proc:

numbclass:= proc (L::list) 
local m, f, g, r, top, i, j, c, LL; 
description "see exercise in http://www.math.unibas.ch/~kraft/Papers/KP-Primer.pdf for the formula for computing the number of elements in a given conjugacy class.  This procedure computes the number of elements in the conjugacy class corresponding to a given partition as imput"; 

top := max(seq(L[k], k = 1 .. nops(L))); 
for i to top do c := 0; 
 for j to nops(L) do 
  if L[j] = i then c := c+1 end if 
 end do; 
 r[i] := c
end do;
LL := [seq(r[i], i = 1 .. top)];
m := `+`(seq(i*LL[i], i = 1 .. nops(LL))); 
f := `*`(seq(i^LL[i], i = 1 .. nops(LL))); 
g := `*`(seq(factorial(LL[i]), i = 1 .. nops(LL))); 
return factorial(m)/(f*g) 
end proc:

mults := proc (degree::integer, numfacts::integer, maxdim::integer)
local M, Par, i, p, X, IP2, N, NN, k, numpar, temp, stopper, d, n, count, myindicator, myoutput, breaker, cc, K; 
description "This procedure computes the multiplicites of the irreducible modules in the decomposition of S^d(A_1\otimes \dots \otimes A_n).  It expects three integers, the degree - d, the number of factors -n, and the maximum dimension of the A_i - maxdim."; 
d := degree; n := numfacts; 
if d = 1 then return start*over end if;
  K := partition(d);
  N := [seq(numbclass(K[i]), i = 1 .. nops(K))];
  M := character(d);
 Par := mypartition(d);
 numpar := nops(Par);
 count := 1;

 for i to numpar do 
 if evalb(nops(Par[i]) <= maxdim) then myindicator[count] := i; count := count+1 end if 
 end do; 
 stopper :=count-1; count := 'count';
for i to stopper do
 X[myindicator[i]] := S[Par[myindicator[i]]] 
 end do;
  i := 'i'; cc :=1;
 if n <= 10 then breaker := [seq(1, i = 1 .. n), seq(0, i = n+1 .. 11)]; 
for i[1] to stopper do
 for i[2] from i[1] to i[1]+breaker[2]*(stopper-i[1]) do
  for i[3] from i[2] to i[2]+breaker[3]*(stopper-i[2]) do
   for i[4] from i[3] to i[3]+breaker[4]*(stopper-i[3]) do
    for i[5] from i[4] to i[4]+breaker[5]*(stopper-i[4]) do
     for i[6] from i[5] to i[5]+breaker[6]*(stopper-i[5]) do
      for i[7] from i[6] to i[6]+breaker[7]*(stopper-i[6]) do
       for i[8] from i[7] to i[7]+breaker[8]*(stopper-i[7]) do
        for i[9] from i[8] to i[8]+breaker[9]*(stopper-i[8]) do
         for i[10] from i[9] to i[9]+breaker[10]*(stopper-i[9]) do
  temp := simplify((`+`(seq(N[q]*(`*`(seq(M[myindicator[i[p]], q], p = 1 .. n))), q = 1 .. nops(Par))))/factorial(d));
   if 0 < temp then myoutput[cc] := [temp, [seq(X[myindicator[i[p]]], p = 1 .. n)]]; cc := cc+1 end if 
         end do
        end do
       end do
      end do
     end do
    end do
   end do
  end do
 end do
end do
end if;
return [seq(myoutput[i], i = 1 .. cc-1)]
end proc:

makeDets:=proc(a,LL::list,mu::list)
 local L:
 description "this procedure makes a product of determinants of sizes determined by a partition LL. The first index of each column is twisted by a permutation mu.";
 L:=myconjpart(LL):
  return `*`(seq(Determinant(Matrix([seq([seq(a[op(j+( `+`(seq(op(p,L),p=1..k-1))),mu),i],j=1 .. op(k,L))], i = 1 .. op(k,L))])) ,k=1..nops(L)))
end proc:

makeUnsymmetric:=proc(J::list,K::list)
description "this procedure takes in a list of partitions J and a list of permutations K and produces the unsymmetrized (and factored!) tensor"; 
 local alpha;
  if(nops(J)<> nops(K)) then return "uneven";
 else
  alpha:= [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]:
  return `*`(seq(makeDets(alpha[i],J[i],K[i]),i=1..nops(J)))
 fi:
end proc:

unfactor:= proc(X,degree,L::list)
description "X is the tensor, d is the degree, L is the list of dimensions of the vector spaces":
  local temp,temp2,p,i;
  if nops(L) >8 then return "too many factors"; fi:
if nops(L) = 2 then
  temp2 := X; 
  for p to degree do 
   temp := 0; 
 for i[1] from 0 to op(1,L)-1 do for i[2] from 0 to op(2,L)-1 do
  temp := coeff(coeff(temp2, a[p, i[1]+1]), b[p, i[2]+1])*Z[[ seq(i[p],p=1..nops(L) )]]+temp 
 end do; end do; 
  temp2 := temp; #print(nops(temp2)) 
 end do;
 return temp;
fi:

if nops(L) = 3 then
 temp2 := X; 
 for p to degree do 
  temp := 0; 
  for i[1] from 0 to op(1,L) do for i[2] from 0 to op(2,L) do for i[3] from 0 to op(3,L) do 
 temp := coeff(coeff(coeff(temp2, a[p, i[1]+1]), b[p, i[2]+1]), c[p, i[3]+1])*Z[[ seq(i[p],p=1..nops(L) )]]+temp;
  end do end do end do;  
  temp2 := temp;
 end do; 
 return temp;
fi:


if nops(L) = 4 then
temp2 := X; 
 for p to degree do 
 temp := 0; 
  for i[1] from 0 to op(1,L) do for i[2] from 0 to op(2,L) do for i[3] from 0 to op(3,L) do for i[4] from 0 to op(4,L) do
 temp := coeff(coeff(coeff(coeff(temp2, a[p, i[1]+1]), b[p, i[2]+1]), c[p, i[3]+1]),d[p,i[4]+1])*Z[[ seq(i[p],p=1..nops(L) )]]+temp 
  end do end do end do end do;
  temp2 := temp;
  end do;
return temp;
fi:
end proc:

#SFill(L):the set of Standard Young Tableaux of shape L 
#(I found this on http://www.math.rutgers.edu/~zeilberg/math640_08.html 
#(accessed May 11, 2011))
SFill:=proc(L) 
  local A,L1,n,A1,i,Lara:
 option remember:
  Lara:=nops(L):
  n:=convert(L,`+`):
  if L=[] then RETURN({[]}): fi:
A:={}:
for i from 1 to nops(L)-1 do
 if L[i]>L[i+1] then
  L1:=[op(1..i-1,L),L[i]-1,op(i+1..nops(L),L)]:
  A1:=SFill(L1):
  A1:={seq( [ op(1..i-1,a1), [op(a1[i]),n],op(i+1..nops(a1),a1)],a1 in A1)}:
  A:=A union A1:
 fi:
od:
if L[Lara]>1 then
L1:=[op(1..Lara-1,L),L[Lara]-1]:
A1:=SFill(L1):
A1:={seq( [ op(1..Lara-1,a1), [op(a1[Lara]),n]],a1 in A1)}:
A:=A union A1:
 else
L1:=[op(1..Lara-1,L)]:
A1:=SFill(L1):
A1:={seq( [ op(1..Lara-1,a1),[n] ],a1 in A1)}:
A:=A union A1:
 fi:
 A:
end:
FillLists:=proc(L::list)
  [seq(FlattenOnce(x) , x in SFill(myconjpart(L)))];
end proc:


evalunfactor:= proc(X,degree,L::list,rules)
description "X is the vector in the tensor algebra,degree is polynomial degree, L is the list of ambient dimensions, and rules are the substitution rules";
local temp,temp2,p,i;
if nops(L) = 3 then
  temp2 := X; 
  for p to degree do 
  temp := 0; 
  for i[1] from 0 to op(1,L) do for i[2] from 0 to op(2,L) do for i[3] from 0 to op(3,L) do 
   temp := subs(rules,coeff(coeff(coeff(temp2, a[p, i[1]+1]), b[p, i[2]+1]), c[p, i[3]+1])*Z[[ seq(i[p],p=1..nops(L) )]])+temp; 
  end do end do end do; 
  temp2 := temp; #print(nops(temp2),"ops");
 end do; 
 return temp;
fi:


if nops(L) = 4 then
temp2 := X; 
for p to degree do 
 temp := 0; 
 for i[1] from 0 to op(1,L) do for i[2] from 0 to op(2,L) do for i[3] from 0 to op(3,L) do for i[4] from 0 to op(4,L) do
 temp := subs(rules,coeff(coeff(coeff(coeff(temp2, a[p, i[1]+1]), b[p, i[2]+1]), c[p, i[3]+1]),d[p,i[4]+1])*Z[[ seq(i[p],p=1..nops(L) )]])+temp; 
end do end do end do end do; 
temp2 := temp; 
end do; 
return temp;
 fi:
end proc:

randunfactor:= proc(X,degree,L::list)
evalunfactor(X,degree,L,generic[1]);
end proc:

testnonzero:=proc(T)
 if evalunfactor(T,degree(T)/3,PDimList,generic[1]) <> 0
 then
return(true);
 else
return(false);
 fi:
end proc:

# input one element of "BigList"
N3Test:=proc(MM,mypoints)
  local  mm, SX, L1, L2, L3, LL, XX, YY, ZZ, W, T, i, x, y, z, tmpRank, TIME, fd,UsedList,LinIndMat,EvalMat,
  ttemp, rrank,s,p, h,g, deg, ss, LLL, modList, KMM, NullKMM, xrand, yrand, zrand, wrand, startRank;
  global GoodFillings, FFill;
printf("testing %a \n", MM);
    mm:=MM[1]:
    SX:=op(2,MM):
    L1:=op(1,op(1,SX)):
    L2:=op(1,op(2,SX)):
    L3:=op(1,op(3,SX)):
    LL:=[seq(op(1,op(j,SX)),j=1..3)]:
    deg:= `+`(seq(L1[i],  i=1..nops(L1)));  #compute the degree for this term.

XX:=FillLists(L1):xrand:=rand(1..nops(XX)):
YY:=FillLists(L2):yrand:=rand(1..nops(YY)):
ZZ:=FillLists(L3):zrand:=rand(1..nops(ZZ)):


#shuffle the loop so that you can hope to randomly find good fillings more quickly
  if mm=1 then #print("multiplicity 1 test"):
    ttemp:=false:
    while ttemp=false do
W :=[XX[xrand()],YY[yrand()],ZZ[zrand()]]:
      if ttemp=false then
        T:=makeUnsymmetric(LL,[W[1],W[2],W[3]]):
        ttemp:=testnonzero(T);
        if ttemp=true then
            FFill:=[seq(W[j],j=1..3) ]: 
         fd:=fopen(fillFile,WRITE):
         fprintf(fd,"Shape:=%a;\n FFill:= %a;\n",LL,FFill);
         fclose(fd):

            T:=makeUnsymmetric(LL,FFill):
            if evalunfactor(T,deg,PDimList,mypoints[1])=0 then
#printf("found %a\n\n",[S[LL],[Fff[FFill]]]):
            return [S[LL],[Fff[FFill]]]:
            fi:         
        fi:
      fi;
    od:
  fi:

    if mm>1 then #print("warning, higher multiplicity"):

 for p from 1 to mm+6 do 
 od:



 LinIndMat:=Matrix(mm+6,mm,0): # add in more points to try to decrease random coincidences

fd:=fopen(pointsFile,WRITE): #load points into memory and store the results for verification
 for p from 1 to mm+6 do
  generic||p :=generic[p]:#give the points names instead of array values (maybe this helps keep things local)
  mypoints||p:=mypoints[p]:
 od:
fclose(fd):

UsedList:={};
TIME:=time[real]();

rrank:=0:
startRank:=0:
for g from 1 to mm do if GoodFillings[g]<>0 then
 startRank := g;
 T||g:=makeUnsymmetric(LL,GoodFillings[g]);
 UsedList:=`union`(UsedList,{T||g});
fi; od;
rrank:=startRank;
printf("StartRank = %a\n",startRank);
if rrank <>mm then
LinIndMat[1..mm+6,1..startRank]:= Matrix([Threads[Seq]([Threads[Seq](evalunfactor(T||g,deg,PDimList,generic||p),g=1..startRank)], p=1..mm+6)]); print(LinIndMat);
fi;


     while rrank<mm do
        W :=[XX[xrand()],YY[yrand()],ZZ[1]]: # make the third factor non-random to increase efficiency
        if rrank<mm then
          GoodFillings[rrank+1]:=W; 
          T:=makeUnsymmetric(LL,W):
          y:=evalunfactor(T,deg,PDimList,generic1); 
        printf("testing %a\n rrank = %a\n", W, rrank);          
          if y <>0 then
            LinIndMat[1,rrank+1]:=y:
 LinIndMat[2..mm+6,rrank+1]:= Matrix([Threads[Seq]([evalunfactor(T,deg,PDimList,generic||p)], p=2..mm+6)]);
 tmpRank:=Rank(LinIndMat);
            if tmpRank>rrank then rrank:=tmpRank:  
            fd:=fopen(fillFile,WRITE):
             fprintf(fd,"Shape:=%a;\n", LL);
             for i to mm do
               fprintf(fd, "GoodFillings[%a]:=%a:\n", i,GoodFillings[i]);
             od;
             fclose(fd):
            fi: 
          fi:
        fi;
      od:
      printf("random search took %a s\n", time[real]()-TIME);
   KMM:=Matrix(mm+6,mm, 0):
   TIME:=time[real]():
       
   for g from 1 to mm do # this goes over which filling to use
   T||g:=makeUnsymmetric(LL,GoodFillings[g]): 
   od:
 KMM:=Matrix([Threads[Seq]([Threads[Seq](evalunfactor(T||g,deg,PDimList,mypoints||p), g=1..mm)], p=1..mm+6)]);
printf("Seq-Seq evaluation took %a s\n", time[real]()-TIME);
TIME:=time[real]():
       NullKMM:=NullSpace(KMM):
printf("NullSpace computation took %a s\n",time[real]()-TIME);

        if NullKMM<>{} then
 printf("found %a\n\n", [S[LL],[seq(Fff[seq(GoodFillings[s][j],j=1..3) ],s=1..rrank)],NullKMM]):
          return [S[LL],[seq(Fff[seq(GoodFillings[s][j],j=1..3) ],s=1..rrank)],NullKMM]:
        fi:
 
    fi:
end:


M2Prep:=proc(SLF)
 local x, mm, m, p, S;
SLF;
if x <> [] then
S:=op(op(1,SLF));
mm:=SLF[nops(SLF)]:  #kernel
m:=nops(mm): #dim kernel
   fprintf(fd,"%a *s_(%a)*t_(%a)*u_(%a)  \n",m,S[1],S[2],S[3]);
fi;
end:



